'use client'

import Image from 'next/image'
import { useState } from 'react'

const paymentMethods = [
  {
    title: 'YouTube\'s Monetization Model',
    description: 'YouTube\'s monetization model is based on the number of views and clicks on ads displayed before, during, and after videos.',
    icon: '/images/yt1.png',
    details: [
      'Have at least 1,000 subscribers',
      'Have at least 4,000 watch hours in the past 12 months',
      'Comply with YouTube\'s community guidelines and terms of service'
    ],
    requirements: 'Requirements for Monetization'
  },
  {
    title: 'How YouTube Calculates Earnings',
    description: 'YouTube calculates earnings based on various factors that determine your revenue from advertisements.',
    icon: '/images/yt2.png',
    details: [
      'Cost Per Click (CPC): The amount advertisers pay for each ad click',
      'Cost Per Mille (CPM): The amount advertisers pay for every 1,000 ad views',
      'Ad Impressions: The number of times ads are displayed',
      'Click-Through Rate (CTR): The percentage of viewers who click on ads'
    ]
  },
  {
    title: 'YouTube\'s Payment Structure',
    description: 'YouTube has a clear and transparent payment structure that determines how creators earn from their content.',
    icon: '/images/yt3.png',
    details: [
      '55% of ad revenue: Creators receive 55% of the ad revenue generated by their videos',
      'Per 1,000 views: Creators earn between $0.50 to $5 per 1,000 views, depending on the niche, audience, and ad engagement'
    ]
  },
  {
    title: 'Payment Thresholds',
    description: 'To receive payments, creators must meet specific thresholds and follow payment schedules.',
    icon: '/images/yt4.png',
    details: [
      '$100 for AdSense: Creators must earn at least $100 from AdSense to receive payments',
      '$10 for YouTube Premium: Creators must earn at least $10 from YouTube Premium to receive payments',
      'Monthly: Payments are made on the 21st of each month for the previous month\'s earnings',
      'Via AdSense: Payments are made through AdSense, which can be linked to a bank account or PayPal'
    ],
    note: 'Keep in mind that YouTube\'s payment structure and thresholds may vary depending on the creator\'s location, niche, and audience.'
  }
]

export default function HowYoutubePays() {
  const [activeMethod, setActiveMethod] = useState(0)

  return (
    <section className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <div className="flex flex-col lg:flex-row">
        {/* Left Side - Sticky Navigation */}
        <div className="w-full lg:w-1/2 lg:sticky lg:top-0 lg:h-screen bg-white border-b lg:border-b-0 lg:border-r border-gray-100">
          <div className="p-6 sm:p-8 lg:p-12 flex flex-col min-h-[50vh] lg:min-h-screen">
            <div className="bg-white rounded-xl sm:rounded-2xl p-6 sm:p-8 shadow-lg">
              <div className="text-center mb-8">
                <h2 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-3 sm:mb-4 leading-tight">How YouTube Pays</h2>
                <p className="text-base sm:text-lg text-gray-600 leading-relaxed">
                  Here&apos;s a simplified explanation of how YouTube pays its creators
                </p>
              </div>
              
              <nav className="space-y-3">
                {paymentMethods.map((method, index) => (
                  <button
                    key={index}
                    onClick={() => setActiveMethod(index)}
                    className={`w-full text-left px-4 py-3 rounded-lg transition-all duration-200 ${
                      activeMethod === index
                        ? 'bg-purple-50 text-purple-700 font-medium border border-purple-100'
                        : 'text-gray-600 hover:bg-gray-50 border border-gray-100'
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <div className="relative h-8 w-8">
                        <div className={`absolute inset-0 ${activeMethod === index ? 'bg-purple-100' : 'bg-gray-100'} rounded-full transform transition-transform duration-300 group-hover:scale-110`} />
                        <Image
                          src={method.icon}
                          alt={method.title}
                          fill
                          className="object-contain p-2"
                        />
                      </div>
                      <span className="text-base">{method.title}</span>
                    </div>
                  </button>
                ))}
              </nav>
            </div>
          </div>
        </div>

        {/* Right Side - Scrollable Content */}
        <div className="w-full lg:w-1/2">
          <div className="p-6 sm:p-8 lg:p-12">
            {paymentMethods.map((method, index) => (
              <div
                key={index}
                className={`transition-opacity duration-300 ${
                  activeMethod === index ? 'opacity-100' : 'opacity-0 hidden'
                }`}
              >
                <div className="bg-white rounded-xl sm:rounded-2xl p-6 sm:p-8 shadow-lg">
                  <div className="relative h-20 w-20 sm:h-24 sm:w-24 mx-auto mb-6 sm:mb-8">
                    <div className="absolute inset-0 bg-purple-100 rounded-full transform transition-transform duration-300 group-hover:scale-110" />
                    <Image
                      src={method.icon}
                      alt={method.title}
                      fill
                      className="object-contain p-3 sm:p-4"
                    />
                  </div>
                  <div className="text-center">
                    <h3 className="text-xl sm:text-2xl font-semibold text-gray-900 mb-4 sm:mb-6">{method.title}</h3>
                    <p className="text-base sm:text-lg text-gray-600 mb-6 sm:mb-8 leading-relaxed">{method.description}</p>
                    {method.requirements && (
                      <h4 className="text-lg sm:text-xl font-medium text-purple-600 mb-4 sm:mb-6">{method.requirements}</h4>
                    )}
                    <ul className="text-left space-y-3 sm:space-y-4">
                      {method.details.map((detail, idx) => (
                        <li key={idx} className="flex items-start">
                          <span className="text-purple-500 mr-3 sm:mr-4 mt-1 text-lg sm:text-xl">â€¢</span>
                          <span className="text-base sm:text-lg text-gray-600 leading-relaxed">{detail}</span>
                        </li>
                      ))}
                    </ul>
                    {method.note && (
                      <div className="mt-6 sm:mt-8 p-4 sm:p-6 bg-purple-50 rounded-lg sm:rounded-xl">
                        <p className="text-sm sm:text-base text-purple-700 italic">{method.note}</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
} 